<resources>
    <string name="app_name">Learn Lua by Example</string>
    <string name="titlePlaceholder">Title</string>
    <string name="articleIconDescription">Article Icon</string>
    <string name="nav_drawer_ClosedName">Closed Navigation Drawer</string>
    <string name="nav_drawer_OpenName">Open Navigation Drawer</string>

    <string name="drawer_articles">Articles</string>
    <string name="drawer_home">Home</string>
    <string name="home_fragment">To get started, open the hamburger menu.</string>
    <string name="exercise_icon_text">Exercise Icon</string>
    <string name="drawer_exercises">Exercises</string>
    <string name="add_article_or_exercise">Add Article or Exercise</string>
    <string name="add_article_below">Add Article Below</string>
    <string name="article_is_hard_label">Article covers advanced concepts</string>
    <string name="content_label">Content:</string>
    <string name="title_label">Title:</string>
    <string name="add_article">Add article</string>
    <string name="add_article_radio">Add Article</string>
    <string name="add_exercise_radio">Add Exercise</string>
    <string name="instructions_label">Instructions:</string>
    <string name="exercise_is_hard">Exercise covers advanced topics</string>
    <string name="add_exercise">Add Exercise</string>
    <string name="test_code">Test code:</string>
    <string name="add_exercise_below">Add Exercise Below</string>
    <string name="info_exercises">Exercises</string>
    <string name="info_articles">Articles</string>
    <string name="creating_articles_info">
    # Articles\n\
    Articles are how you will be introduced to new concepts.\n\
    They are very simple - they explain, with code examples and explanations,
    how a specific concept works.\n\
\n\
    # Creating Articles\n\
    Articles contain 3 main values:\n\
    - **Title** - This is the title that appears in the article list. It is recommended to start it with a number,
                  similar to this: `1. Variables`\n\
    - **Content** - This is the part that explains the concept. It uses [Markdown](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) syntax for formatting and highlighting.
                    It is recommended to add a title at the start of the text, like this: `# Title Goes Here`\n\
    - **Is hard** - This decides whether the article is considered "Hard". There are no hard requirements for this,
                    It only changes whether the article appears with a star icon in the article list.
  </string>
    <string name="creating_exercises_info">
    # Exercises\
    Exercises are how you will be tested on new concepts.\
    They require you to write code, according to instructions,\
    so that the pre-programmed test will pass.\
    \
    Simply put, this means you will have to write code that does what the instructions ask of you.\
    \
    # Creating Exercises\
    Exercises contain 5 main values:\
    - **Title** - This is the title that appears in the exercise list. It is recommended to start it with a number,\
                  similar to this: `1. Variables`\
    - **Instructions** - This is the part that explains the user what to do. It uses [Markdown](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) syntax for formatting and highlighting.
                         It is recommended to add a title at the start of the instructions, like this: `# Title Goes Here`\
    - **Test** - This is the part that checks the submitted code. It should have a function called `test()`,\
                 which should not take any parameters. It should return true if the code matches the instructions,\
                 and return false or crash if it does not. Using `assert()` is great for this case.\
    - **Template** - This is the part that appears as a template to the user when they first open your exercise.\
                     It is recommended to not leave this empty. This will be overwritten once they submit a valid solution.\
    - **Is hard** - This decides whether the exercise is considered "Hard". There are no hard requirements for this,\
                    It only changes whether the exercise appears with a star icon in the article list.\
  </string>
    <string name="reset_local_database">Reset Local Database</string>
    <string name="exerciseFABIconDescription">Test code</string>
    <string name="code_goes_here">Code goes here</string>
    <string name="app_icon_description">Learn Lua by Example icon</string>
    <string name="template_text">Template:</string>
    <string name="get_info">Get Help</string>
    <string name="general">General</string>
    <string name="share_course">Share Course</string>
    <string name="save_course">Save Course</string>
    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="input_code">Input Code</string>
    <string name="send_to_repl">Send to REPL</string>
    <string name="repl">REPL</string>
    <string name="import_course">Import Course</string>
    <string name="create_course_btn">Create Course</string>
    <string name="donot_nag">Disable Airplane Notifications</string>
    <string name="title_activity_splash_screen">Splash Screen</string>
    <string name="dummy_button">Dummy Button</string>
    <string name="dummy_content">DUMMY\nCONTENT</string>
    <string name="introduction_md">
        # Learn to Program with Lua\
        Lua is a versatile, yet easy programming language.\
        This app will help you learn or teach programming with Lua,\
        by creating or completing exercises and following along with the explanations.\
        \
        Lua is widely used as an embedded language, to script programs written in other languages.\
        An example for that would be the Nginx web server,\
        which can use Lua for more granular control over which requests are accepted.
    </string>
    <string name="continue_to_app">Continue to app</string>
</resources>
